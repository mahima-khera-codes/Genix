/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/assistants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Assistants */
        get: operations["get_assistants_api_assistants_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assistants/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Assistants */
        get: operations["get_assistants_api_assistants__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assistants/{assistant_id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Assistant */
        get: operations["get_assistant_api_assistants__assistant_id___get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assistants/{assistant_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Assistant */
        get: operations["get_assistant_api_assistants__assistant_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/messages/send-message/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Message
         * @description Endpoint to receive a message. Requires authentication.
         */
        post: operations["send_message_api_messages_send_message__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/messages/send-message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Message
         * @description Endpoint to receive a message. Requires authentication.
         */
        post: operations["send_message_api_messages_send_message_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/last-thread/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Last Thread */
        post: operations["last_thread_api_threads_last_thread__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/last-thread": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Last Thread */
        post: operations["last_thread_api_threads_last_thread_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** New Thread */
        post: operations["new_thread_api_threads__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/threads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** New Thread */
        post: operations["new_thread_api_threads_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User */
        get: operations["get_user_api_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get User */
        get: operations["get_user_api_users__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Root
         * @description Root endpoint.
         *
         *     Returns:
         *         dict: A welcome message.
         */
        get: operations["read_root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/protected": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Protected Route */
        get: operations["protected_route_protected_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AssistantResponse */
        AssistantResponse: {
            /**
             *  Id
             * Format: uuid
             */
            _id?: string;
            /**
             * Created
             * Format: date-time
             * @default 2024-10-08T15:25:49.358057Z
             */
            created: string;
            /** Assistant Id */
            assistant_id: string;
            /** Image */
            image: string;
            /** Model */
            model: string;
            /** Name */
            name: string;
            /**
             * Provider
             * @constant
             * @enum {string}
             */
            provider: "OpenAI";
            /**
             * Status
             * @enum {string}
             */
            status: "Public" | "Market" | "Private";
            /** Summary Full */
            summary_full: string;
            /** Summary Short */
            summary_short: string;
            /** Thread Ids */
            thread_ids: string[];
            /** Token Count */
            token_count: number;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** ListAssistantsResponse */
        ListAssistantsResponse: {
            /** Assistants */
            assistants: components["schemas"]["AssistantResponse"][];
        };
        /** Message */
        Message: {
            /**
             * Created
             * Format: date-time
             * @default 2024-10-08T15:25:49.638767Z
             */
            created: string;
            /** Thread Id */
            thread_id: string;
            /** Message */
            message: string;
            /**
             * Role
             * @enum {string}
             */
            role: "user" | "assistant";
            /**
             * Status
             * @default Pending
             * @enum {string}
             */
            status: "Pending" | "Complete" | "Error";
            /** Token Count */
            token_count: number;
        };
        /** SendMessageRequest */
        SendMessageRequest: {
            /** Message */
            message: string;
            /** Thread Id */
            thread_id?: string | null;
        };
        /** SendMessageResponse */
        SendMessageResponse: {
            /** Response */
            response: string;
            /** Thread Id */
            thread_id: string;
        };
        /** ThreadRequest */
        ThreadRequest: {
            /** Assistant Id */
            assistant_id: string;
            /** Assistant Name */
            assistant_name: string;
            /** Model */
            model: string;
            /**
             * Provider
             * @constant
             * @enum {string}
             */
            provider: "OpenAI";
        };
        /** ThreadResponse */
        ThreadResponse: {
            /** Id */
            id: string;
            /** User Id */
            user_id: string;
            /** Assistant Id */
            assistant_id: string;
            /** Assistant Name */
            assistant_name: string;
            /** Is Welcome Thread */
            is_welcome_thread: boolean;
            /** Model */
            model: string;
            /**
             * Provider
             * @constant
             * @enum {string}
             */
            provider: "OpenAI";
            /** Provider Thread Id */
            provider_thread_id: string;
            /** Summary */
            summary: string;
            /** Messages */
            messages: components["schemas"]["Message"][];
        };
        /** UserAssistant */
        UserAssistant: {
            /** Id */
            id: string;
            /**
             * Created
             * Format: date-time
             * @default 2024-10-08T15:25:49.358057Z
             */
            created: string;
            /** Image */
            image: string;
            /** Model */
            model: string;
            /** Name */
            name: string;
            /**
             * Provider
             * @constant
             * @enum {string}
             */
            provider: "OpenAI";
            /**
             * Status
             * @enum {string}
             */
            status: "Public" | "Market" | "Private";
            /** Summary Full */
            summary_full: string;
            /** Summary Short */
            summary_short: string;
            /** Token Count */
            token_count: number;
        };
        /** UserMessage */
        UserMessage: {
            /**
             *  Id
             * Format: uuid
             */
            _id?: string;
            /**
             * Created
             * Format: date-time
             * @default 2024-10-08T15:25:49.358057Z
             */
            created: string;
            /** Message */
            message: string;
            /**
             * Role
             * @enum {string}
             */
            role: "user" | "assistant";
            /**
             * Status
             * @enum {string}
             */
            status: "Pending" | "Complete" | "Error";
            /** Token Count */
            token_count: number;
        };
        /** UserResponse */
        UserResponse: {
            /** Id */
            id: string;
            /**
             * Created
             * Format: date-time
             * @default 2024-10-08T15:25:49.358057Z
             */
            created: string;
            /** Email */
            email: string;
            /** Image */
            image: string;
            /** Name */
            name: string;
            /** Assistants */
            assistants: components["schemas"]["UserAssistant"][];
            /** Threads */
            threads: components["schemas"]["UserThread"][];
            /**
             * Token Count
             * @default 0
             */
            token_count: number;
        };
        /** UserThread */
        UserThread: {
            /** Id */
            id: string;
            /**
             * Created
             * Format: date-time
             * @default 2024-10-08T15:25:49.358057Z
             */
            created: string;
            /** Assistant Name */
            assistant_name: string;
            /** Model */
            model: string;
            /** Provider Thread Id */
            provider_thread_id: string;
            /**
             * Provider
             * @constant
             * @enum {string}
             */
            provider: "OpenAI";
            /** Summary */
            summary: string;
            /** Messages */
            messages: components["schemas"]["UserMessage"][];
            /** Token Count */
            token_count: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_assistants_api_assistants_get: {
        parameters: {
            query?: {
                force?: boolean;
                mongodb_uri?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAssistantsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_assistants_api_assistants__get: {
        parameters: {
            query?: {
                force?: boolean;
                mongodb_uri?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAssistantsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_assistant_api_assistants__assistant_id___get: {
        parameters: {
            query?: {
                force?: boolean;
                mongodb_uri?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the assistant to retrieve */
                assistant_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssistantResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_assistant_api_assistants__assistant_id__get: {
        parameters: {
            query?: {
                force?: boolean;
                mongodb_uri?: string;
            };
            header?: never;
            path: {
                /** @description The ID of the assistant to retrieve */
                assistant_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssistantResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_message_api_messages_send_message__post: {
        parameters: {
            query?: {
                force?: boolean;
                mongodb_uri?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendMessageRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendMessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_message_api_messages_send_message_post: {
        parameters: {
            query?: {
                force?: boolean;
                mongodb_uri?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendMessageRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendMessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    last_thread_api_threads_last_thread__post: {
        parameters: {
            query?: {
                force?: boolean;
                mongodb_uri?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    last_thread_api_threads_last_thread_post: {
        parameters: {
            query?: {
                force?: boolean;
                mongodb_uri?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    new_thread_api_threads__post: {
        parameters: {
            query?: {
                force?: boolean;
                mongodb_uri?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ThreadRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    new_thread_api_threads_post: {
        parameters: {
            query?: {
                force?: boolean;
                mongodb_uri?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ThreadRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ThreadResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_api_users_get: {
        parameters: {
            query?: {
                force?: boolean;
                mongodb_uri?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_api_users__get: {
        parameters: {
            query?: {
                force?: boolean;
                mongodb_uri?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    protected_route_protected_get: {
        parameters: {
            query?: {
                force?: boolean;
                mongodb_uri?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
